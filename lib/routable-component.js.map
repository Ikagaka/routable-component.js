{"version":3,"sources":["lib/routable-component.js"],"names":[],"mappings":"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","file":"routable-component.js","sourcesContent":["import {EventEmitter} from 'events';\n\n/**\n * ルーティング可能なコンポーネント\n */\nexport class RoutableComponent extends EventEmitter {\n  /**\n   * constructor\n   * @param {Object<EventEmitter>} [components] コンポーネントの連想配列\n   * @param {RoutableComponentRoutes} routes ルーティング\n   * @param {Object<RoutableComponentController>} controllerClasses コントローラクラスの連想配列\n   */\n  constructor(components, routes, controllerClasses) {\n    super();\n    this._routes = routes;\n    this._controllerClasses = controllerClasses;\n    this._controllers = {};\n    this._components = {};\n    this._listeners = {};\n    this.registerComponents(components);\n  }\n\n  /**\n   * Routes\n   * @type {RoutableComponentRoutes}\n   */\n  get routes() { return this._routes; }\n\n  /**\n   * Controllers\n   * @type {Hash<RoutableComponentController>}\n   */\n  get controllers() { return this._controllers; }\n\n  /**\n   * Controller classes\n   * @type {Hash<class<RoutableComponentController>>}\n   */\n  get controllerClasses() { return this._controllerClasses; }\n\n  /**\n   * Components\n   * @type {Hash<EventEmitter>}\n   */\n  get components() { return this._components; }\n\n  /**\n   * コンポーネントを追加し、ルーティングによるイベントを設定する\n   *\n   * すでにコンポーネントがあった場合は一度削除してから改めて追加する\n   * @param {Object<RoutableComponent>} components コンポーネントのリスト\n   * @return {void}\n   */\n  registerComponents(components) {\n    for (const name of Object.keys(components)) {\n      const component = components[name];\n      this.registerComponent(name, component);\n    }\n  }\n\n  /**\n   * コンポーネントを追加し、ルーティングによるイベントを設定する\n   *\n   * すでにコンポーネントがあった場合は一度削除してから改めて追加する\n   * @param {string} name コンポーネント名\n   * @param {RoutableComponent} component コンポーネント\n   * @return {void}\n   */\n  registerComponent(name, component) {\n    if (this.components[name]) this.unregisterComponent(name);\n    this.components[name] = component;\n    for (const route of this.routes) {\n      if (route.from === name) this._attachRouteEvent(route);\n    }\n  }\n\n  /**\n   * コンポーネントを削除し、ルーティングによるイベントを破棄する\n   * @param {string} name コンポーネント名\n   * @return {void}\n   */\n  unregisterComponent(name) {\n    if (this.components[name] && this._listeners[name]) {\n      const listeners = this._listeners[name];\n      for (const event of Object.keys(listeners)) {\n        for (const listener of listeners[event]) {\n          this.components[name].removeListener(event, listener);\n        }\n      }\n    }\n    delete this.components[name];\n    delete this._listeners[name];\n  }\n\n  _attachRouteEvent(route) {\n    const listener = (...args) => {\n      if (!this.controllers[route.controller]) {\n        if (!(route.controller in this.controllerClasses)) {\n          throw new Error(`controller [${route.controller}] not found`);\n        }\n        this.controllers[route.controller] =\n          new this.controllerClasses[route.controller](this);\n      }\n      if (!this.controllers[route.controller][route.action]) {\n        throw new Error(\n          `controller [${route.controller}] does not have action [${route.action}]`\n        );\n      }\n      this.controllers[route.controller][route.action](...args);\n    };\n    this.components[route.from].on(route.event, listener);\n    if (!this._listeners[route.from]) this._listeners[route.from] = {};\n    if (!this._listeners[route.from][route.event]) this._listeners[route.from][route.event] = [];\n    this._listeners[route.from][route.event].push(listener);\n  }\n}\n\n/**\n * ルーティング設定定義\n * @interface\n */\nexport class RoutableComponentRouting {\n  /**\n   * ルーティングをセットアップする\n   * @param {RoutableComponentRoutes} routes ルーティング設定\n   * @return {void}\n   */\n  setup(routes) {\n    throw new Error('abstruct');\n  }\n}\n\n/**\n * コントローラ\n * @interface\n */\nexport class RoutableComponentController {\n  /**\n   * コンストラクタ\n   * @param {RoutableComponent} component コンポーネント\n   */\n  constructor(component) {\n    throw new Error('abstruct');\n  }\n}\n\n/**\n * イベントのルーティング設定\n * @notice スレッドセーフではありません\n */\nexport class RoutableComponentRoutes {\n  /**\n   * コンストラクタ\n   * @param {RoutableComponentRouting|RoutableComponentRouting[]} routingClasses ルート定義クラス(の配列)\n   */\n  constructor(routingClasses = []) {\n    this._routes = [];\n    this.includeRoute(routingClasses);\n  }\n\n  /**\n   * ルートを設定する\n   * @param {Route|Route[]} routingClasses ルート定義クラス(の配列)\n   * @return {void}\n   */\n  includeRoute(routingClasses) {\n    const _routingClasses = routingClasses instanceof Array ? routingClasses : [routingClasses];\n    for (const routeClass of _routingClasses) {\n      const route = new routeClass();\n      route.setup(this);\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this._routes[Symbol.iterator]();\n  }\n\n  /**\n   * イベントを定義する\n   * @param {...string} args from, event, controller, action(前提としたものは省く)それぞれの名称文字列\n   * @return {void}\n   * @example\n   * router.event('shell', 'clicked', 'ShellController', 'shell_clicked'); // full\n   * router.event('shell', 'clicked', 'ShellController'); // event = action\n   * router.controller('ShellController', function(router) {\n   *   router.event('shell', 'clicked'); // controllerは前提があるので省く\n   * });\n   * router.from('shell', function(router) {\n   *   router.controller('ShellController', function(router) {\n   *     router.event('clicked'); // from, controllerは前提があるので省く\n   *   });\n   * });\n   */\n  event(...args) {\n    if (this._currentFrom && this._currentController) {\n      if (args.length > 2) throw new Error('arguments too long');\n      this.eventOnFromController(...args);\n    } else if (this._currentFrom) {\n      if (args.length > 3) throw new Error('arguments too long');\n      this.eventOnFrom(...args);\n    } else if (this._currentController) {\n      if (args.length > 3) throw new Error('arguments too long');\n      this.eventOnController(...args);\n    } else {\n      this.eventOnNone(...args);\n    }\n  }\n\n  /**\n   * from, controllerを前提としてイベントを定義する\n   * @param {string} event イベント\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  eventOnFromController(event, action = event) {\n    const from = this._currentFrom;\n    const controller = this._currentController;\n    this.addRoute(from, event, controller, action);\n  }\n\n  /**\n   * fromを前提としてイベントを定義する\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  eventOnFrom(event, controller, action = event) {\n    const from = this._currentFrom;\n    this.addRoute(from, event, controller, action);\n  }\n\n  /**\n   * controllerを前提としてイベントを定義する\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  eventOnController(from, event, action = event) {\n    const controller = this._currentController;\n    this.addRoute(from, event, controller, action);\n  }\n\n  /**\n   * 前提なしとしてイベントを定義する\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  eventOnNone(from, event, controller, action = event) {\n    this.addRoute(from, event, controller, action);\n  }\n\n  /**\n   * イベント発生源を前提とする\n   * @param {string} from イベント発生源プロパティ名\n   * @param {Function} block 前提としたイベント発生源におけるルート定義を行う関数\n   * @return {void}\n   */\n  from(from, block) {\n    this._currentFrom = from;\n    block(this);\n    delete this._currentFrom;\n  }\n\n  /**\n   * コントローラーを前提とする\n   * @param {string} controller コントローラ名\n   * @param {Function} block 前提としたコントローラにおけるルート定義を行う関数\n   * @return {void}\n   */\n  controller(controller, block) {\n    this._currentController = controller;\n    block(this);\n    delete this._currentController;\n  }\n\n  /**\n   * ルート定義を追加する\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} action アクション\n   * @return {void}\n   */\n  addRoute(from, event, controller, action) {\n    this._routes.push(new RoutableComponentRoute(from, event, controller, action));\n  }\n\n  /**\n   * ルーティングの状態を返す\n   * @return {string} ルーティングの状態を示す文字列\n   */\n  toString() {\n    return this._routes\n      .sort((a, b) =>\n        (a.from === b.from ? 0 : a.from > b.from ? 10 : -10)\n          + (a.event === b.event ? 0 : a.event > b.event ? 1 : -1)\n      )\n      .map((route) => route.toString() + '\\n')\n      .join('');\n  }\n}\n\n/**\n * ルート\n */\nexport class RoutableComponentRoute {\n  /**\n   * コンストラクタ\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} action アクション\n   */\n  constructor(from, event, controller, action) {\n    this._checkConstructorArguments(from, event, controller, action);\n    this._from = from;\n    this._event = event;\n    this._controller = controller;\n    this._action = action;\n  }\n\n  _checkConstructorArguments(from, event, controller, action) {\n    const isString = (obj) => typeof obj === 'string' || obj instanceof String;\n    if (from == null) throw new Error('register routing error: from is empty!');\n    if (event == null) throw new Error('register routing error: event is empty!');\n    if (controller == null) throw new Error('register routing error: controller is empty!');\n    if (action == null) throw new Error('register routing error: action is empty!');\n    if (!isString(from) || !isString(event) || !isString(controller) || !isString(action)) {\n      throw new Error('register routing error: arguments must be string!');\n    }\n  }\n\n  /**\n   * イベント発生源\n   * @type {string}\n   */\n  get from() { return this._from; }\n  /**\n   * イベント\n   * @type {string}\n   */\n  get event() { return this._event; }\n  /**\n   * コントローラ\n   * @type {string}\n   */\n  get controller() { return this._controller; }\n  /**\n   * アクション\n   * @type {string}\n   */\n  get action() { return this._action; }\n\n  /**\n   * ルーティングの状態を返す\n   * @return {string} ルーティングの状態を示す文字列\n   */\n  toString() {\n    return `${this.from}.${this.event} => ${this.controller}#${this.action}`;\n  }\n}\n"]}