{"version":3,"sources":["routable-component.js","lib/routable-component.js"],"names":[],"mappings":"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","file":"routable-component.js","sourcesContent":[null,"import {EventEmitter} from 'events';\n\n/**\n * ルーティング可能なコンポーネント\n */\nexport class RoutableComponent extends EventEmitter {\n  constructor() {\n    super();\n    this._models = {};\n    this._controllers = {};\n  }\n\n  /**\n   * Models\n   * @type {Hash<Object>}\n   */\n  get models() { return this._models; }\n\n  /**\n   * Controllers\n   * @type {Hash<RoutableComponentController>}\n   */\n  get controllers() { return this._controllers; }\n}\n\n/**\n * ルーティング設定定義\n * @interface\n */\nexport class RoutableComponentRouting {\n  /**\n   * ルーティングをセットアップする\n   * @param {RoutableComponentRoutes} routes ルーティング設定\n   * @return {void}\n   */\n  setup(routes) {\n    throw new Error('abstruct');\n  }\n}\n\n/**\n * コントローラ\n * @interface\n */\nexport class RoutableComponentController {\n  /**\n   * コンストラクタ\n   * @param {RoutableComponent} component コンポーネント\n   */\n  constructor(component) {\n    throw new Error('abstruct');\n  }\n}\n\n/**\n * イベントのルーティング設定\n * @notice スレッドセーフではありません\n */\nexport class RoutableComponentRoutes {\n  /**\n   * コンストラクタ\n   * @param {RoutableComponentRouting|RoutableComponentRouting[]} routing_classes ルート定義クラス(の配列)\n   */\n  constructor(routing_classes = []) {\n    this._routes = [];\n    this.include_route(routing_classes);\n  }\n\n  /**\n   * ルートを設定する\n   * @param {Route|Route[]} routing_classes ルート定義クラス(の配列)\n   * @return {void}\n   */\n  include_route(routing_classes) {\n    const _routing_classes = routing_classes instanceof Array ? routing_classes : [routing_classes];\n    for (const route_class of _routing_classes) {\n      const route = new route_class();\n      route.setup(this);\n    }\n  }\n\n  /**\n   * コンポーネントのもつイベント発火要素のイベントにルーティングを設定する\n   * @param {RoutableComponent} component コンポーネント\n   * @param {Hash<RoutableComponentController>} controller_classes コントローラクラスの連想配列\n   * @return {void}\n   */\n  setup_to(component, controller_classes) {\n    this._check_routes_requirements(component, controller_classes);\n    for (const route of this._routes) {\n      component[route.from].on(route.event, (...args) => {\n        if (!component.controllers[route.controller]) { // なければコントローラを初期化\n          component.controllers[route.controller] =\n            new controller_classes[route.controller](component);\n        }\n        component.controllers[route.controller][route.action](...args);\n      });\n    }\n  }\n\n  _check_routes_requirements(component, controller_classes) {\n    for (const route of this._routes) {\n      if (!(route.controller in controller_classes)) {\n        throw new Error(`controller [${route.controller}] not found`);\n      }\n      if (!(route.from in component)) {\n        throw new Error(`component from [${route.from}] not found`);\n      }\n    }\n  }\n\n  // [Symbol.iterator]() {\n  //   return this._routes[Symbol.iterator]();\n  // }\n\n  /**\n   * イベントを定義する\n   * @param {...string} args from, event, controller, action(前提としたものは省く)それぞれの名称文字列\n   * @return {void}\n   * @example\n   * router.event('shell', 'clicked', 'ShellController', 'shell_clicked') // full\n   * router.event('shell', 'clicked', 'ShellController') // event = action\n   * router.controller('ShellController', function(router) {\n   *   router.event('shell', 'clicked') // controllerは前提があるので省く\n   * });\n   * router.from('shell', function(router) {\n   *   router.controller('ShellController', function(router) {\n   *     router.event('clicked') // from, controllerは前提があるので省く\n   *   });\n   * });\n   */\n  event(...args) {\n    if (this._current_from && this._current_controller) {\n      if (args.length > 2) throw new Error('arguments too long');\n      this.event_on_from_controller(...args);\n    } else if (this._current_from) {\n      if (args.length > 3) throw new Error('arguments too long');\n      this.event_on_from(...args);\n    } else if (this._current_controller) {\n      if (args.length > 3) throw new Error('arguments too long');\n      this.event_on_controller(...args);\n    } else {\n      this.event_on_none(...args);\n    }\n  }\n\n  /**\n   * from, controllerを前提としてイベントを定義する\n   * @param {string} event イベント\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  event_on_from_controller(event, action = event) {\n    const from = this._current_from;\n    const controller = this._current_controller;\n    this.add_route(from, event, controller, action);\n  }\n\n  /**\n   * fromを前提としてイベントを定義する\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  event_on_from(event, controller, action = event) {\n    const from = this._current_from;\n    this.add_route(from, event, controller, action);\n  }\n\n  /**\n   * controllerを前提としてイベントを定義する\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  event_on_controller(from, event, action = event) {\n    const controller = this._current_controller;\n    this.add_route(from, event, controller, action);\n  }\n\n  /**\n   * 前提なしとしてイベントを定義する\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} [action] アクション\n   * @return {void}\n   */\n  event_on_none(from, event, controller, action = event) {\n    this.add_route(from, event, controller, action);\n  }\n\n  /**\n   * イベント発生源を前提とする\n   * @param {string} from イベント発生源プロパティ名\n   * @param {Function} block 前提としたイベント発生源におけるルート定義を行う関数\n   * @return {void}\n   */\n  from(from, block) {\n    this._current_from = from;\n    block(this);\n    delete this._current_from;\n  }\n\n  /**\n   * コントローラーを前提とする\n   * @param {string} controller コントローラ名\n   * @param {Function} block 前提としたコントローラにおけるルート定義を行う関数\n   * @return {void}\n   */\n  controller(controller, block) {\n    this._current_controller = controller;\n    block(this);\n    delete this._current_controller;\n  }\n\n  /**\n   * ルート定義を追加する\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} action アクション\n   * @return {void}\n   */\n  add_route(from, event, controller, action) {\n    this._routes.push(new RoutableComponentRoute(from, event, controller, action));\n  }\n\n  /**\n   * ルーティングの状態を返す\n   * @return {string} ルーティングの状態を示す文字列\n   */\n  toString() {\n    return this._routes\n      .sort((a, b) =>\n        (a.from === b.from ? 0 : a.from > b.from ? 10 : -10)\n          + (a.event === b.event ? 0 : a.event > b.event ? 1 : -1)\n      )\n      .map((route) => route.toString() + '\\n')\n      .join('');\n  }\n}\n\n/**\n * ルート\n */\nexport class RoutableComponentRoute {\n  /**\n   * コンストラクタ\n   * @param {string} from イベント発生源\n   * @param {string} event イベント\n   * @param {string} controller コントローラ\n   * @param {string} action アクション\n   */\n  constructor(from, event, controller, action) {\n    this._check_constructor_arguments(from, event, controller, action);\n    this._from = from;\n    this._event = event;\n    this._controller = controller;\n    this._action = action;\n  }\n\n  _check_constructor_arguments(from, event, controller, action) {\n    const isString = (obj) => typeof obj === 'string' || obj instanceof String;\n    if (from == null) throw new Error('register routing error: from is empty!');\n    if (event == null) throw new Error('register routing error: event is empty!');\n    if (controller == null) throw new Error('register routing error: controller is empty!');\n    if (action == null) throw new Error('register routing error: action is empty!');\n    if (!isString(from) || !isString(event) || !isString(controller) || !isString(action)) {\n      throw new Error('register routing error: arguments must be string!');\n    }\n  }\n\n  /**\n   * イベント発生源\n   * @type {string}\n   */\n  get from() { return this._from; }\n  /**\n   * イベント\n   * @type {string}\n   */\n  get event() { return this._event; }\n  /**\n   * コントローラ\n   * @type {string}\n   */\n  get controller() { return this._controller; }\n  /**\n   * アクション\n   * @type {string}\n   */\n  get action() { return this._action; }\n\n  /**\n   * ルーティングの状態を返す\n   * @return {string} ルーティングの状態を示す文字列\n   */\n  toString() {\n    return `${this.from}.${this.event} => ${this.controller}#${this.action}`;\n  }\n}\n"]}